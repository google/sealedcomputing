//  Copyright 2022 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sealed.e2e_authn;

import "third_party/sealedcomputing/protoc_plugin/annotations.proto";

service E2eAuthnService {
  // Echoes back a given string request as response.
  // This is intended to smoke-test an end-to-end connection to the sealed
  // application and/or policy.
  rpc Echo(EchoRequest) returns (EchoResponse) {}

  // Enrolls a recovery key together with a knowledge factor required to
  // subsequently retrieve the recovery key.
  rpc Enroll(EnrollRequest) returns (EnrollResponse) {}

  // Attempts to retrieve the recovery key by supplying a knowledge factor
  // claim.
  rpc Open(OpenRequest) returns (OpenResponse) {}

  // Decrypts a ciphertext encrypted to the sealed job public key and returns
  // the plaintext.
  // Note: this is intended to only smoke-test encrypting to the sealed job.
  // Real applications should not use this as the response contains the
  // plaintext in the clear.
  rpc DecryptAndEcho(DecryptAndEchoRequest) returns (DecryptAndEchoResponse) {}
}

message EchoRequest {
  string request = 1;
}

message EchoResponse {
  string response = 1;
}

message EnrollRequest {
  // Public identifier for the (recovery key, knowledge factor) tuple.
  string recovery_key_identifier = 1;
  // Knowledge factor associated with the recovery key being enrolled.
  // This is a secret value.
  string knowledge_factor = 2 [(sealed.proto.secret) = true];
  // The recovery key being enrolled. This is a secret value.
  string recovery_key = 3 [(sealed.proto.secret) = true];
  // Maximum number of incorrect guesses to allow before denying any subsequent
  // attempts to retrieve the recovery key.
  uint32 bad_guess_limit = 4;
}

message EnrollResponse {
  // TODO(b/223244303): remove this.
  string unused = 1;
}

message OpenRequest {
  // Identifies the recovery key being retrieved.
  string recovery_key_identifier = 1;
  // The knowledge factor (guess) associated with the recovery key.
  string knowledge_factor = 2 [(sealed.proto.secret) = true];
}

message OpenResponse {
  // Whether the knowledge factor guess in the request was correct.
  bool is_guess_correct = 1;
  // If the knowledge factor guess is correct, then the (secret) value of the
  // recovery key. Otherwise, is empty.
  string recovery_key = 2 [(sealed.proto.secret) = true];
  // How many bad guesses left for this recovery key before any subseuqent
  // attempts to retrieve it are denied.
  uint32 bad_guesses_left = 3;
}

message DecryptAndEchoRequest {
  // A ciphertext encrypted to the sealed job public key.
  string ciphertext = 1;
}

message DecryptAndEchoResponse {
  // Plaintext value associated with ciphertext in the request.
  // Note: this is intended to only smoke-test encrypting to the sealed job.
  // Real applications should not use reveal secret plaintext values in the
  // clear.
  string plaintext = 1;
}
